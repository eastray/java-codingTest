package tugOfWar;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.Collectors;

public class TugOfWar {

	@SuppressWarnings("rawtypes")
	private ArrayList<ArrayList> setArray(int[] arr) {
		ArrayList<Integer> first = new ArrayList<Integer>();
		ArrayList<Integer> second = new ArrayList<Integer>();

		for (int ele : arr) {
			if (first.isEmpty())
				first.add(ele);
			else if (second.isEmpty())
				second.add(ele);

			else if (first.get(first.size() - 1) > second.get(second.size() - 1))
				second.add(ele);
			else
				first.add(ele);
		}

		if (first.size() > second.size()) {
			second.add(0);
			second = (ArrayList<Integer>) second.stream().sorted().collect(Collectors.toList());
		} else if (first.size() < second.size()) {
			first.add(0);
			first = (ArrayList<Integer>) first.stream().sorted().collect(Collectors.toList());
		}

		ArrayList<ArrayList> list = new ArrayList<ArrayList>();
		list.add(first);
		list.add(second);

		return list;
	}

	@SuppressWarnings("rawtypes")
	private ArrayList<ArrayList> swapArray(ArrayList<Integer> first, ArrayList<Integer> second) {

		int minS = second.stream().mapToInt(m -> m).min().getAsInt();

		for (int i = 0; i < first.size(); i++)
			if (minS < first.get(i)) {
				second.add(first.get(i));
				first.add(minS);
				first.remove(i);
				second.remove(0);
				break;
			}

		ArrayList<ArrayList> list = new ArrayList<ArrayList>();
		list.add(first);
		list.add(second);

		return list;
	}

	@SuppressWarnings("unchecked")
	public int[] tugOfWar(int[] arr) {

		Arrays.sort(arr);

		@SuppressWarnings("rawtypes")
		ArrayList<ArrayList> list = setArray(arr);

		ArrayList<Integer> first = list.get(0);
		ArrayList<Integer> second = list.get(1);

		int diff = Integer.MAX_VALUE;
		int[] result = new int[2];

		for (int j = 0; j < arr.length; j++) {
			int sumF = first.stream().mapToInt(m -> m).sum();
			int sumS = second.stream().mapToInt(m -> m).sum();

			if (diff > Math.abs(sumF - sumS)) {
				diff = Math.abs(sumF - sumS);
				result[0] = sumF;
				result[1] = sumS;
			}

			if (sumF == sumS)
				return new int[] { sumF, sumS };

			if (sumF != sumS) {
				list = swapArray(first, second);

				first = (sumF > sumS) ? list.get(0) : list.get(1);
				second = (sumF > sumS) ? list.get(1) : list.get(0);
			}

			second = (ArrayList<Integer>) second.stream().sorted().collect(Collectors.toList());
			first = (ArrayList<Integer>) first.stream().sorted().collect(Collectors.toList());

		}

		return result;
	}

	public static void main(String[] args) {

		TugOfWar tow = new TugOfWar();

		// @SuppressWarnings("resource")
		// Scanner scanner = new Scanner(System.in);
		// int n = scanner.nextInt();
		// int[] array = new int[n];

		// for (int i = 0; i < n; i++) {
		// array[i] = scanner.nextInt();
		// }
		int[] array = { 45, 55, 70, 60, 50, 75 };

		System.out.println(Arrays.toString(tow.tugOfWar(array)));
		System.out.println(Arrays.toString(tow.tugOfWar(new int[] { 2, 3, 4, 7, 8 })));
		System.out.println(Arrays.toString(tow.tugOfWar(new int[] { 92, 56, 47, 82 })));
		System.out.println(Arrays.toString(tow.tugOfWar(new int[] { 50, 50, 100, 200 })));
		System.out.println(Arrays.toString(tow.tugOfWar(new int[] { 100, 90, 200 })));

	}
	
	public int[] tugOfWar(){
		 int totalA = sum(a); //최초 합계 계산
	        int totalB = sum(b); //최초 합계 계산
	        int tmp = 0;

	        for(int j=0 ; j<a.length ; j++){
	            for(int k=0 ; k<b.length ; k++){
	                if(Math.abs(totalA-totalB) > Math.abs( (totalA-a[j]+b[k]) - (totalB-b[k]+a[j]) )){
	                    // 임시적으로 값을 교환해 계산한 결과가 교환전 결과보다 차이가 적을 때 실제 값 변경
	                    tmp = a[j];
	                    a[j] = b[k];
	                    b[k] = tmp;

	                    totalA = sum(a); // 치환 후 합계 계산
	                    totalB = sum(b);
	                }
	            }
	        }

	        if (totalA > totalB ) System.out.println(totalB + " " + totalA );
	        else                  System.out.println(totalA + " " + totalB );
	    }

	    private int sum(int[] list) {
	        int total = 0;
	        for(int i=0 ; i<list.length ; i++)
	            total +=list[i];
	        return total;
	    }

	
	
}
