package fourBoxes;

import java.util.Arrays;

public class FourBoxes {

//	public int fourBoxes(int[][] arr) {
//
//		int[][] boxes = new int[10][10];
//
//		for (int[] ele : arr)
//			for (int i = ele[1]; i <= ele[3]; i++)
//				for (int j = ele[0]; j <= ele[2]; j++)
//					boxes[i][j] = 1;
//
//		int result = 0;
//
//		for (int[] elements : boxes)
//			for (int ele : elements)
//				if (ele == 1)
//					result++;
//
//		return result;
//	}
//
//	public static void main(String[] args) {
//		// TODO Auto-generated method stub
//
//		FourBoxes fb = new FourBoxes();
//
//		System.out
//				.println(fb.fourBoxes(new int[][] { { 1, 2, 4, 4 }, { 2, 3, 5, 7 }, { 3, 1, 6, 5 }, { 7, 3, 8, 6 } }));
//
//	}

	
	private static final int[] rect1 = {1, 2, 4, 4};
    private static final int[] rect2 = {2, 3, 5, 7};
    private static final int[] rect3 = {3, 1, 6, 5};
    private static final int[] rect4 = {7, 3, 8, 6};

    enum MIN_MAX{MIN, MAX};

    public static void main(String[] args) {

        // find min, max of possible area
        int minX = findMinMax(MIN_MAX.MIN, rect1[0], rect2[0], rect3[0], rect4[0]);
        int minY = findMinMax(MIN_MAX.MIN, rect1[1], rect2[1], rect3[1], rect4[1]);
        int maxX = findMinMax(MIN_MAX.MAX, rect1[2], rect2[2], rect3[2], rect4[2]);
        int maxY = findMinMax(MIN_MAX.MAX, rect1[3], rect2[3], rect3[3], rect4[3]);

        int possibleAreaWidth = maxX - minX;
        int possibleAreaHeight = maxY - minY;

        int[][] field =  new int[possibleAreaHeight][possibleAreaWidth];

        fillField(field, rect1, minX, minY);
        fillField(field, rect2, minX, minY);
        fillField(field, rect3, minX, minY);
        fillField(field, rect4, minX, minY);

        System.out.println(sumFields(field));
    }

    private static void fillField(int[][] field, int[] rect, int offsetX, int offsetY) {

        for(int i = rect[1] - offsetY; i < rect[3] - offsetY; i++) {  // row
            for(int j = rect[0] - offsetY; j < rect[2] - offsetY; j++) {  // column
                field[i][j] = 1;
            }
        }
    }

    private static int sumFields(int[][] field) {

        int sum = 0;

        for(int i = 0; i < field.length; i++) {  // row
            for(int j = 0; j < field[i].length; j++) {  // column
                sum += field[i][j];
            }
        }
        return sum;
    }

    private static int findMinMax(MIN_MAX minMax, int... values) {
        int result = values[0];

        for(int input : values) {
            if(MIN_MAX.MIN.equals(minMax)) {
                result = Math.min(result, input);
            } else {
                result = Math.max(result, input);
            }
        }
        return result;
    }

}
