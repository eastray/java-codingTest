package problem15;

import java.math.BigInteger;

public class FindDirections {

	private void print(int[][] arr) {
		for (int[] array : arr) {
			for (int ele : array)
				System.out.print(ele + " ");
			System.out.println();
		}

	}

	private int findDirections(int[][] arr) {
		print(arr);

		arr[1][1] = arr[1][0] = 1;

		for (int i = 2; i < arr.length; i++) {
			for (int j = 0; j < arr[i].length; i++) {
				if (j == 0 || i == j)
					arr[i][j] = 1;
				else
					arr[i][j] = arr[i - 1][j - 1] + arr[i - 1][j];
			}
		}
	}

	public static BigInteger combination(int n, int m) {
		BigInteger[][] dp = new BigInteger[101][101];
		dp[1][1] = dp[1][0] = BigInteger.valueOf(1);
		for (int i = 2; i <= n; i++) {
			for (int j = 0; j <= i; j++) {
				if (j == 0 || i == j)
					dp[i][j] = BigInteger.valueOf(1);
				else
					dp[i][j] = dp[i - 1][j - 1].add(dp[i - 1][j]);
			}
		}
		return dp[n][m];
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		// int[][] arr = new int[21][21];
		int[][] arr = new int[3][3];

		FindDirections fd = new FindDirections();

		fd.findDirections(arr);
	}

}
