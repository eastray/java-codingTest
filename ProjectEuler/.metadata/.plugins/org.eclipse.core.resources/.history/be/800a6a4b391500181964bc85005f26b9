package problem14;

import java.util.HashMap;

public class Collatz {

	// n → n / 2 (n이 짝수일 때)
	// n → 3 n + 1 (n이 홀수일 때)
	HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();

	private int getCountOfCollatz(int n) {
		int count = 1;

		System.out.print(n);

		while (true) {

			if (map.containsKey(n)) {
				System.out.println("map: " + map.get(n).intValue());
				count += map.get(n).intValue();
			}

			if (n <= 1)
				break;

			n = (n % 2 == 0) ? n / 2 : n * 3 + 1;
			System.out.print(" -> " + n);

			count++;
		}
		System.out.println();
		return count;
	}

	private int getNumberOfProcess(int n) {

		int[] arr = new int[n + 1];
		int max = 0;
		int maxNum = 0;

		for (int i = n; i >= 0; i--) {
			arr[i] = getCountOfCollatz(i);
			map.put(i, arr[i]);

			if (max < arr[i]) {
				max = arr[i];
				maxNum = i;
			}
		}

		System.out.println("map");
		for (int i = n; i >= 0; i--) {
			System.out.print(i + ": ");
			System.out.println(map.get(i));

		}

		System.out.println("maxNum: " + maxNum);
		System.out.println("max: " + max);
		return maxNum;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Collatz collatz = new Collatz();

		System.out.println(collatz.getNumberOfProcess(1000));

		// System.out.println(collatz.getCountOfCollatz(1000000));

	}

}
